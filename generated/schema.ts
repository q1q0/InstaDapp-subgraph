// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Flashloan extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Flashloan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Flashloan must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Flashloan", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Flashloan | null {
    return changetype<Flashloan | null>(
      store.get("Flashloan", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get eth(): Bytes | null {
    let value = this.get("eth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set eth(value: Bytes | null) {
    if (!value) {
      this.unset("eth");
    } else {
      this.set("eth", Value.fromBytes(<Bytes>value));
    }
  }

  get usdc(): Bytes | null {
    let value = this.get("usdc");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set usdc(value: Bytes | null) {
    if (!value) {
      this.unset("usdc");
    } else {
      this.set("usdc", Value.fromBytes(<Bytes>value));
    }
  }

  get usdt(): Bytes | null {
    let value = this.get("usdt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set usdt(value: Bytes | null) {
    if (!value) {
      this.unset("usdt");
    } else {
      this.set("usdt", Value.fromBytes(<Bytes>value));
    }
  }

  get dai(): Bytes | null {
    let value = this.get("dai");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dai(value: Bytes | null) {
    if (!value) {
      this.unset("dai");
    } else {
      this.set("dai", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Amount extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Amount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Amount must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Amount", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Amount | null {
    return changetype<Amount | null>(store.get("Amount", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get vol(): BigInt | null {
    let value = this.get("vol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set vol(value: BigInt | null) {
    if (!value) {
      this.unset("vol");
    } else {
      this.set("vol", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }
}
